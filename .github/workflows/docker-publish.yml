name: Docker Build

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag'
        required: true
        type: string

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            jeseng/kratos-selfservice-wasm
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest

      - name: Validate build configuration
        uses: docker/build-push-action@v6
        with:
          call: check

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    needs: publish
    runs-on: ubuntu-latest

    env:
      REF_TYPE: ${{ github.ref_type }}
      REF_NAME: ${{ github.ref_name }}
      INPUT_TAG: ${{ inputs.version_tag }}

    steps:
      - name: Check for curl
        run: type -p curl >/dev/null || (sudo apt-get update && sudo apt-get install curl -y)

      - name: Get release tag
        shell: bash
        run: |
          if [ "${{ env.REF_TYPE }}" = "tag" ]; then
            echo "TAG=${{ env.REF_NAME }}" >> $GITHUB_ENV
            echo "Using tag: ${{ env.REF_NAME }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "TAG=${{ env.INPUT_TAG }}" >> $GITHUB_ENV
            echo "Using tag: ${{ env.INPUT_TAG }}" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check for existing release
        id: check_release
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
        run: |
          curl -L -X GET \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer $GH_TOKEN" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "https://api.github.com/repos/${{ env.OWNER }}/${{ env.REPO }}/releases/tags/${{ env.TAG }}" \
          -o release.json
          # Don't return exit code 1 if no match found
          # Credit https://stackoverflow.com/a/49627999/8120300
          html_url=$({ grep -Po -m 1 '(?:\G(?!^)",|"html_url":\s*)\s*"\K[^"]+' release.json || test $? = 1; }| { grep -v grep || test $? = 1; })
          if [[ -z "$html_url" ]]; then
            echo "No release matching tag ${{ env.TAG }} found" >> $GITHUB_STEP_SUMMARY
            echo "needs_release=true" >> $GITHUB_OUTPUT
          else
            echo "upload_url=$(grep -Po '(?:\G(?!^)",|"upload_url":\s*)\s*"\K[^"{]+' release.json)" >> $GITHUB_ENV
            echo "Found release [${{ env.TAG }}]($html_url)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Create release
        if: ${{ steps.check_release.outputs.needs_release }}
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          BRANCH: main
        run: |
          curl -L -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer $GH_TOKEN" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "https://api.github.com/repos/${{ env.OWNER }}/${{ env.REPO }}/releases" \
          -d '{"tag_name":"${{ env.TAG }}","target_commitish":"${{ env.BRANCH }}","body":"___This release was automatically generated___","draft":false,"prerelease":false,"generate_release_notes":true}' \
          -o release.json
          echo "upload_url=$(grep -Po '(?:\G(?!^)",|"upload_url":\s*)\s*"\K[^"{]+' release.json)" >> $GITHUB_ENV
          html_url=$(grep -Po -m 1 '(?:\G(?!^)",|"html_url":\s*)\s*"\K[^"]+' release.json)
          echo "Created release [${{ env.TAG }}]($html_url)" >> $GITHUB_STEP_SUMMARY
